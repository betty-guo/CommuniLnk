{"version":3,"sources":["frontend/containers/ResultsContainer.jsx","frontend/components/Input.jsx","frontend/components/Select.jsx","frontend/components/Button.jsx","frontend/containers/BusinessContainer.jsx","frontend/containers/CharityContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultsContainer","props","console","log","className","response","map","key","_id","name","Input","id","type","inputType","value","onChange","handleChange","placeholder","Select","disabled","options","option","label","Button","style","onClick","action","title","buttonStyle","Component","margin","CharityContainer","state","newCharity","mission","needs","missionOptions","needsOptions","handleFullName","bind","handleFormSubmit","handleClearForm","handleInput","e","target","this","setState","prevState","preventDefault","userData","fetch","method","body","JSON","stringify","headers","Accept","then","json","data","length","onSubmit","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62a68cfe.chunk.js","sourcesContent":["import React from 'react';\nimport './ResultsContainer.css';\n\nfunction ResultsContainer(props) {\n  console.log(props);\n  return (\n    <div className=\"Results\">\n      <header className=\"Results-header\">\n      <div className=\"col-md-6\">\n        {props.response.map(response => {\n          return (\n            <h1 key={response._id}>{response.name}</h1>\n          );\n        })}\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default ResultsContainer;\n","import React from \"react\";\n\nconst Input = props => {\n  //console.log(props.value);\n  return (\n    <div className=\"form-group\">\n      <input\n        className=\"form-control\"\n        id={props.name}\n        name={props.name}\n        type={props.inputType}\n        value={props.value}\n        onChange={props.handleChange}\n        placeholder={props.placeholder}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst Select = props => {\n  return (\n    <div className=\"form-group\">\n      <select\n        id={props.name}\n        name={props.name}\n        value={props.value}\n        onChange={props.handleChange}\n        className=\"form-control\"\n      >\n        <option value=\"\" disabled>\n          {props.placeholder}\n        </option>\n        {props.options.map(option => {\n          return (\n            <option key={option} value={option} label={option}>\n              {option}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\n\nexport default Select;\n","import React from \"react\";\n\nconst Button = props => {\n  console.log(props.style);\n  return (\n    <button\n      style={props.style}\n      className={\n        props.type == \"primary\" ? \"btn btn-primary\" : \"btn btn-secondary\"\n      }\n      onClick={props.action}\n    >\n      {props.title}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component }  from 'react';\nimport './BusinessContainer.css';\nimport ResultsContainer from \"./ResultsContainer.jsx\";\n\n/* Import Components */\nimport Input from \"../components/Input\";\nimport Select from \"../components/Select\";\nimport Button from \"../components/Button\";\n\nclass BusinessContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newBusiness: {\n        name: \"\",\n        values: \"\",\n        give: \"\"\n      },\n\n      valuesOptions: [\"Sustainability\", \"Community\", \"Health\", \"Financial Security\"],\n      giveOptions: [\"Food\", \"Clothing\", \"People\", \"Money\", \"Other\"],\n      response: []\n    };\n    this.handleFullName = this.handleFullName.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  /* This lifecycle hook gets executed when the component mounts */\n\n  handleFullName(e) {\n    let value = e.target.value;\n    this.setState(\n      prevState => ({\n        newBusiness: {\n          ...prevState.newBusiness,\n          name: value\n        }\n      }),\n      () => console.log(this.state.newBusiness)\n    );\n  }\n\n  handleInput(e) {\n    let value = e.target.value;\n    let name = e.target.name;\n    this.setState(\n      prevState => ({\n        newBusiness: {\n          ...prevState.newBusiness,\n          [name]: value\n        }\n      }),\n      () => console.log(this.state.newBusiness)\n    );\n  }\n\n  handleFormSubmit(e) {\n    e.preventDefault();\n    let userData = this.state.newBusiness;\n    console.log(userData);\n\n    fetch(\"https://ellehacks-2020-dd.appspot.com/business/add\", {\n      method: \"POST\",\n      body: JSON.stringify(userData),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      response.json().then(data => {\n        this.setState({response: data});\n      });\n    });\n  }\n\n  handleClearForm(e) {\n    e.preventDefault();\n    this.setState({\n      newBusiness: {\n        name: \"\",\n        values: \"\",\n        give: \"\"\n      }\n    });\n  }\n  render() {\n    if (this.state.response.length > 0) {\n      return (\n        <ResultsContainer response={this.state.response}/>\n      )\n    }\n    return (\n      <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n        <Input\n          inputType={\"text\"}\n          title={\"Business Name\"}\n          name={\"name\"}\n          value={this.state.newBusiness.name}\n          placeholder={\"Enter business name\"}\n          handleChange={this.handleInput}\n        />{\" \"}\n        {/* Name of the user */}\n        <Select\n          name={\"values\"}\n          options={this.state.valuesOptions}\n          value={this.state.newBusiness.values}\n          placeholder={\"My values are\"}\n          handleChange={this.handleInput}\n        />{\" \"}\n        {/* Age Selection */}\n        <Select\n          name={\"give\"}\n          options={this.state.giveOptions}\n          value={this.state.newBusiness.give}\n          placeholder={\"I can give\"}\n          handleChange={this.handleInput}\n        />{\" \"}\n        {/* Skill */}\n        <Button\n          action={this.handleFormSubmit}\n          type={\"primary\"}\n          title={\"Submit\"}\n          style={buttonStyle}\n        />{\" \"}\n        {/*Submit */}\n        <Button\n          action={this.handleClearForm}\n          type={\"secondary\"}\n          title={\"Clear\"}\n          style={buttonStyle}\n        />{\" \"}\n        {/* Clear the form */}\n      </form>\n    );\n  }\n}\n\nconst buttonStyle = {\n  margin: \"10px 10px 10px 10px\"\n};\n\nexport default BusinessContainer;\n","import React, { Component }  from 'react';\nimport './CharityContainer.css';\nimport ResultsContainer from \"./ResultsContainer.jsx\";\n\n/* Import Components */\nimport Input from \"../components/Input\";\nimport Select from \"../components/Select\";\nimport Button from \"../components/Button\";\n\nclass CharityContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newCharity: {\n        name: \"\",\n        mission: \"\",\n        needs: \"\"\n      },\n\n      missionOptions: [\"Sustainability\", \"Community\", \"Health\", \"Financial Security\"],\n      needsOptions: [\"Food\", \"Clothing\", \"People\", \"Money\", \"Other\"],\n      response: []\n    };\n    this.handleFullName = this.handleFullName.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  /* This lifecycle hook gets executed when the component mounts */\n\n  handleFullName(e) {\n    let value = e.target.value;\n    this.setState(\n      prevState => ({\n        newCharity: {\n          ...prevState.newCharity,\n          name: value\n        }\n      }),\n      () => console.log(this.state.newCharity)\n    );\n  }\n\n  handleInput(e) {\n    let value = e.target.value;\n    let name = e.target.name;\n    this.setState(\n      prevState => ({\n        newCharity: {\n          ...prevState.newCharity,\n          [name]: value\n        }\n      }),\n      () => console.log(this.state.newCharity)\n    );\n  }\n\n  handleFormSubmit(e) {\n    e.preventDefault();\n    let userData = this.state.newCharity;\n    console.log(userData);\n\n    fetch(\"https://ellehacks-2020-dd.appspot.com/charity/add\", {\n      method: \"POST\",\n      body: JSON.stringify(userData),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      response.json().then(data => {\n        this.setState({response: data});\n      });\n    });\n  }\n\n  handleClearForm(e) {\n    e.preventDefault();\n    this.setState({\n      newCharity: {\n        name: \"\",\n        mission: \"\",\n        needs: \"\"\n      }\n    });\n  }\n  render() {\n    if (this.state.response.length > 0) {\n      return (\n        <ResultsContainer response={this.state.response}/>\n      )\n    }\n    return (\n      <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n        <Input\n          inputType={\"text\"}\n          title={\"Charity Name\"}\n          name={\"name\"}\n          value={this.state.newCharity.name}\n          placeholder={\"Enter Charity name\"}\n          handleChange={this.handleInput}\n        />{\" \"}\n        {/* Name of the user */}\n        <Select\n          name={\"mission\"}\n          options={this.state.missionOptions}\n          value={this.state.newCharity.mission}\n          placeholder={\"My mission is\"}\n          handleChange={this.handleInput}\n        />{\" \"}\n        {/* Age Selection */}\n        <Select\n          name={\"needs\"}\n          options={this.state.needsOptions}\n          value={this.state.newCharity.needs}\n          placeholder={\"I can needs\"}\n          handleChange={this.handleInput}\n        />{\" \"}\n        {/* Skill */}\n        <Button\n          action={this.handleFormSubmit}\n          type={\"primary\"}\n          title={\"Submit\"}\n          style={buttonStyle}\n        />{\" \"}\n        {/*Submit */}\n        <Button\n          action={this.handleClearForm}\n          type={\"secondary\"}\n          title={\"Clear\"}\n          style={buttonStyle}\n        />{\" \"}\n        {/* Clear the form */}\n      </form>\n    );\n  }\n}\n\nconst buttonStyle = {\n  margin: \"10px 10px 10px 10px\"\n};\n\nexport default CharityContainer;\n","import React from 'react';\nimport BusinessContainer from \"./frontend/containers/BusinessContainer.jsx\";\nimport CharityContainer from \"./frontend/containers/CharityContainer.jsx\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div className=\"col-md-6\">\n        <h1> Charity </h1>\n        <CharityContainer />\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}